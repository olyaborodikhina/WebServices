Часть 1: RPC ориентированные сервисы
------------------------------------

Разработать SEI и его реализации для двух сервисов:
    1. Echo - соответсвует описанию из файла resources/echo.wsdl
    2. Hello - соответсвует описанию из файла resources/hello.wsdl

Запустить сервисы и проверить что клиенты работают корректно (нет ошибок и есть результат в STDOUT).
Сервис Echo:
    1. Запускаем класс EchoServiceLauncher - он разворачивает SEI-класс под контейнером
       и делает сервис доступным по адресу http://localhost:8080/ws/echo
    2. Запускаем класс EchoClientLauncher - он вызывает сервис по адресу http://localhost:8080/ws/echo

Сервис Hello:
    1. Запускаем класс HelloServiceLauncher - он разворачивает SEI-класс под контейнером
       и делает сервис доступным по адресу http://localhost:8080/ws/hello
    2. Запускаем класс HelloClientLauncher - он вызывает сервис по адресу http://localhost:8080/ws/hello

Проанализировать WSDL получаемый по ссылкам:
    http://localhost:8080/ws/echo?wsdl
    http://localhost:8080/ws/hello?wsdl

Соответсвуют ли они эталлоным?



Часть 2: Message ориентированные сервисы
----------------------------------------

Реализовать логику для сервиса из echo.wsdl в виде Message-ориентированного сервиса (@WebServiceProvider).
Режим работы - @ServiceMode(Service.Mode.PAYLOAD), базовый интерфейс для класса - Provider<Source>
Для удобства работы с XML запроса/ответа - использовать JAXB. Для этого написаны классы EchoRequest и EchoResponse.
Как вариант - возможно использовать DOM для работы с запросом/ответом.
Кому как проще/удобнее.

Код провадера пишем в классе ws.echo.EchoProviderImpl.

После реализации запустить класс ws.EchoServiceProviderLauncher - это сделает сервис доступным по адресу http://localhost:8080/ws/echo
Затем воспользоваться уже знакомым клиентом - классом ws.EchoClientLauncher.
Убедиться что сервис работает.

Проанализировать результат.


Время выполнения - 40-60 минут